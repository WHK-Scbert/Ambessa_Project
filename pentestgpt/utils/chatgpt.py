# -*- coding: utf-8 -*-

import dataclasses
import json
import re
import requests
import time
import loguru
from pathlib import Path
from typing import Dict, List
from uuid import uuid1
from pentestgpt.config.chat_config import ChatGPTConfig

# Initialize logger
logger = loguru.logger
logger.remove()
logger.add("logs/chatgpt.log", level="ERROR")


@dataclasses.dataclass
class Message:
    ask_id: str = None
    ask: dict = None
    answer: dict = None
    answer_id: str = None
    request_start_timestamp: float = None
    request_end_timestamp: float = None
    time_escaped: float = None


@dataclasses.dataclass
class Conversation:
    title: str = None
    conversation_id: str = None
    message_list: List[Message] = dataclasses.field(default_factory=list)


class ChatGPT:
    def __init__(self, config: ChatGPTConfig):
        self.config = config
        self.model = "gpt-4"
        self.headers = {
            "Authorization": f"Bearer {self.config.openai_key}",
            "Content-Type": "application/json",
        }
        self.conversation_dict: Dict[str, Conversation] = {}

    def send_new_message(self, message: str, gen_title: bool = False):
        """
        Start a new conversation with the GPT model.
        """
        logger.info("Sending a new message to ChatGPT")
        url = "https://api.openai.com/v1/chat/completions"
        message_id = str(uuid1())
        data = {
            "model": self.model,
            "messages": [{"role": "user", "content": message}],
            "max_tokens": 1000,
            "temperature": 0.7,
        }
        try:
            response = requests.post(url, headers=self.headers, json=data)
            response.raise_for_status()
            result = response.json()
            text = result["choices"][0]["message"]["content"]
            conversation_id = result.get("id", str(uuid1()))

            # Log and store the conversation
            message_data = Message(
                ask_id=message_id,
                ask=data,
                answer=result,
                request_start_timestamp=time.time(),
                request_end_timestamp=time.time(),
                time_escaped=0,
            )
            conversation = self.conversation_dict.get(conversation_id, Conversation())
            conversation.conversation_id = conversation_id
            conversation.message_list.append(message_data)
            self.conversation_dict[conversation_id] = conversation

            if gen_title:
                conversation.title = f"Chat on {time.strftime('%Y-%m-%d %H:%M:%S')}"

            return text, conversation_id
        except Exception as e:
            logger.error(f"Error in send_new_message: {e}")
            return None, None

    def send_message(self, message: str, conversation_id: str):
        """
        Continue an existing conversation by sending a message.
        """
        logger.info("Continuing conversation with ChatGPT")
        url = "https://api.openai.com/v1/chat/completions"
        data = {
            "model": self.model,
            "messages": [{"role": "user", "content": message}],
            "max_tokens": 1000,
            "temperature": 0.7,
        }
        try:
            response = requests.post(url, headers=self.headers, json=data)
            response.raise_for_status()
            result = response.json()
            text = result["choices"][0]["message"]["content"]

            # Log and store the message in the conversation
            message_data = Message(
                ask_id=str(uuid1()),
                ask=data,
                answer=result,
                request_start_timestamp=time.time(),
                request_end_timestamp=time.time(),
                time_escaped=0,
            )
            if conversation_id not in self.conversation_dict:
                self.conversation_dict[conversation_id] = Conversation(
                    conversation_id=conversation_id
                )
            self.conversation_dict[conversation_id].message_list.append(message_data)

            return text
        except Exception as e:
            logger.error(f"Error in send_message: {e}")
            return None

    def extract_code_fragments(self, text: str) -> List[str]:
        """
        Extract code blocks from the response.
        """
        return re.findall(r"```(.*?)```", text, re.DOTALL)


if __name__ == "__main__":
    # Initialize ChatGPT configuration
    chatgpt_config = ChatGPTConfig()
    chatgpt = ChatGPT(chatgpt_config)

    # Start a new conversation
    text, conversation_id = chatgpt.send_new_message("Hello! How can I test RESTful APIs?")
    print("Conversation ID:", conversation_id)
    print("Response:", text)

    # Continue the conversation
    result = chatgpt.send_message(
        "Please generate a POST request for uploading an image.", conversation_id
    )
    print("Continuation Response:", result)

    # Extract code fragments
    code_snippets = chatgpt.extract_code_fragments(result)
    print("Extracted Code Snippets:", code_snippets)
